Moves Learn About | Order | Manage | Help to the left 19 pixels.  Written by Carrie.  Comments added to ShowMenu2
***
%%COPYRIGHT
	
	var nTCode = [];
	var AnimStep = 0;
	var AnimHnd = 0;
	var NSDelay = 0;
	var MenusReady = false;
	var smHnd = 0;
	var mhdHnd = 0;
	var lsc = null;
	var imgObj = null;
	var IsContext = false;
	var IsFrames = false;
%%DXFILTER
%%TIMERS
%%CONTEXTMENU
%%FORMSTWEAK
%%DWSUPPORT01
%%BLINKFX
	
	var nsOWH;
	
	var mFrame;
	var cFrame = self;
	
	var om = [];
	var nOM = 0;
	
	var mX;
	var mY;
	
%%BROWSERDETECTION
	var IX=(IE&&IsWin&&!SM&&!OP&&(BV>=5.5)&&(dxFilter!=null)&&(nua.indexOf('CE')==-1));
	
	if(!eval(frames['self'])) {
	frames.self = window;
	frames.top = top;
	}
	
%%TOOLBARVARS
%%IRSUPPORT01
%%DWSUPPORT04
%%FX
%%STYLECODE
%%TOOLBARSTYLE

	function GetCurCmd(e)0/ {
		//IE,SM,OP,KQ
		//This function will return the current command under the mouse pointer.
		//It will return null if the mouse is not over any command.
		//------------------------------
		//Version 1.6
		//
		var cc = e;
		while(cc.id=="") {
			cc = cc.parentElement;
			if(cc==null) break;
		}
		return cc;
	}

	function HoverSel(mode, e)0/ {
		//IE,SM,OP,KQ
		//This is the function called every time the mouse pointer is moved over a command.
		//------------------------------
		//mode: 0 if the mouse is moving over the command and 1 if is moving away.
		//imgLName: Name of the left image object, if any.
		//imgRName: Name of the right image object, if any.
		//------------------------------
		//Version 16.6
		//
		var mc;
		var lc;
		
		%%BLINKDIS
		if(nOM==0) return false;
		ClearTimer(smHnd);smHnd = 0;
		
		if(mode==0) {
			if(om[nOM].sc!=null) HoverSel(1);
			mc = GetCurCmd(e);
			if(scDelay) {
				if(!mc.onmouseout) mc.onmouseout = new Function("if(nOM)om[nOM].hsm = window.setTimeout(\"HideSubMenus('"+mc.id+"')\", scDelay)");
				for(var i=1; i<=nOM; i++) ClearTimer(om[i].hsm);
			} else
				HideSubMenus(mc.id);
			om[nOM].sc = mc;
			FixCursor(mc);
		} else {
			mc = (mode==1)?om[nOM].sc:om[nOM].op;
			%%AUTOSELP1
			om[nOM].sc = null;
		}
		
		SwapMC(mode, mc);
		
		return true;
	}

	function HideSubMenus(id)0/ {
		//IE,SM,OP,KQ
		//This function handles the submenus visibility
		//------------------------------
		//Version 1.0
		//
		mc = GetObj(id);
		if(nOM>1) {
			if(mc==om[nOM-1].sc) return false;
			lc = (BV>=5?mc.parentNode.parentNode.id:mc.parentElement.parentElement.id);
			while(true) {
				if(!nOM) return false;
				if(lc==om[nOM].id) break;
				Hide();
			}
			if(nOM && scDelay) mc.onmouseover();
		}
	}

	function SwapMC(mode, mc, f)0/ {
		//IE,SM,OP,KQ
		//This is the function swaps the normal/over items to create the rollover effect.
		//------------------------------
		//mode: 0 if the mouse is moving over the command and 1 if is moving away.
		//mc: reference to the item that must be swapped.
		//------------------------------
		//Version 1.0
		//
		if(!f) f = mFrame;
		var id = mc.id.substr(1);
		n1 = GetObj((mode!=0?"O":"N") + id, f);
		n1.style.visibility = "hidden";
		n2 = GetObj((mode==0?"O":"N") + id, f);
		n2.style.visibility = "inherit";		
		if(mode==0 && !n1.c) {
			n1.c = true;
			n1 = (BV<5?n1.all.tags("DIV"):n1.getElementsByTagName("DIV"))[0];
			if(n1)
				(BV<5?n2.all.tags("DIV"):n2.getElementsByTagName("DIV"))[0].innerHTML = n1.innerHTML;
		}
	}

	function NSHoverSel(mode, mc)0/ {
		//NS
		//This is the function called every time the mouse pointer is moved over or away from a command.
		//------------------------------
		//mode: 0 if the mouse is moving over the command and 1 if is moving away.
		//------------------------------
		//Version 13.1
		//
		var mcN;
		var mn;
		
		ClearTimer(smHnd);smHnd = 0;
		if(!nOM) return false;
		
		if(mode==0 && om[nOM].sc!=null) NSHoverSel(1);
		
		if(mode==0) {
			mn = mc.name.substr(0, mc.name.indexOf("EH"));
			mcN = mc.parentLayer.layers[mn + "N"];
			mcN.mcO = mc.parentLayer.layers[mn + "O"];
			if(nOM>1) if(mc==om[nOM-1].sc) return false;
			while(!InMenu()&&nOM>1) Hide();
			om[nOM].sc = mcN;
			mcN.mcO.visibility = "show";
			mcN.visibility = "hide";
		} else {
			mcN = (mode==1)?om[nOM].sc:om[nOM].op;
			mcN.visibility = "show";
			mcN.mcO.visibility = "hide";						
			om[nOM].sc = null;
		}
		return true;
	}

	function Hide(chk)0/ {
		//IE,NS,SM,OP,KQ
		//This function hides the last opened group and it keeps hiding all the groups until
		//no more groups are opened or the mouse is over one of them.
		//Also takes care of reseting any highlighted commands.
		//------------------------------
		//Version 4.7
		//
		var m;
		var cl = false;
		
		ClearTimer(mhdHnd);mhdHnd = 0;
		ClearTimer(AnimHnd);AnimHnd = 0;
		if(chk)	if(InMenu()) return false;
		
		if(nOM) {
			m = om[nOM];
			if(m.sc!=null) {
				if(IE) HoverSel(1);
				if(NS) NSHoverSel(1);
			}
			if(m.op!=null) {
				if(IE) HoverSel(3);
				if(NS) NSHoverSel(3);
			}
			%%IRSUPPORT02
			ToggleMenu(m, "hidden");
			ClearTimer(om[nOM].hsm);
			nOM--;
			cl = (nOM==0);
			if(cl) imgObj = null;
			%%DWSUPPORT02
		}
		
		if(cl||chk) {
			ClearTimer(smHnd);smHnd = 0;
			if(tbNum && lmcHS)
				if(!lmcHS.disable) {
					if(IE) hsHoverSel(1);
					if(NS) hsNSHoverSel(1);
				}
			if(!lmcHS) window.status = "";
		}
		if((nOM>0||lmcHS)&&!InSelMenu()) mhdHnd = window.setTimeout("Hide(1)", TimerHideDelay/20);
		
		return true;
	}

	function ToggleMenu(m, s)0/ {
		//IE,NS,SM,OP,KQ
		//This function controls how the menus are displayed
		//and hidden from the screen.
		//------------------------------
		//Version 1.2
		//
		if(IX)
			if(document.readyState=="complete" && m.getAttribute("filters")!=null) {
				if(!m.fs) {
					m.fsn = m.filters.length;
					m.style.filter = dxFilter + m.style.filter;
					m.fs = true;
				}
				for(var i=0; i<m.filters.length - m.fsn; i++) {
					m.filters[i].apply();
					m.style.visibility = s;
					m.filters[i].play();
				}
			}
		m.style.visibility = s;
		FormsTweak(s=="visible"?"hidden":"visible");
	}

	function ShowMenu(mName, x, y, isCascading, hsImgName, algn)0/ {
		//IE,NS,SM,OP,KQ
		//This function controls the way menus and submenus are displayed.
		//It also handles the display menus delay.
		//------------------------------
		//Version 2.0
		//
		%%BLINKDIS
		ClearTimer(smHnd);smHnd = 0;
		if(isCascading) {
			lsc = om[nOM].sc;
			smHnd = window.setTimeout("if(nOM)if(lsc==om[nOM].sc)ShowMenu2('"+mName+"',0,0,true,'',"+algn+")",smDelay);
		} else {
			if(nOM>0)
				if(om[1].id == mName) return false;
			ClearTimer(mhdHnd);mhdHnd = 0;
			if(!algn) algn = 0;
			if(algn<0 && !lmcHS) return false;
			
			HideAll(1);
			smHnd = window.setTimeout("ShowMenu2('"+mName+"',"+x+","+y+",false,'"+hsImgName+"',"+algn+")",rmDelay);
		}
		return true;
	}

	function ShowMenu2(mName, x, y, isCascading, hsImgName, algn)1/ {
		//IE,NS,SM,OP,KQ
		//This is the main function to show the menus when a hotspot is triggered or a cascading command is activated.
		//------------------------------
		//mName: Name of the <div> or <layer> to be shown.
		//x: Left position of the menu.
		//y: Top position of the menu.
		//isCascading: True if the menu has been triggered from a command.
		//hsImgName: Image to which the menu is attached to.
		//algn: Alignment setting for the menu.
		//------------------------------
		//Version 21.0
		//
		var xy;
		x = parseInt(x);y = parseInt(y);
		
		var Menu = GetObj(mName);
		if(!Menu) return false;
		
		if(Menu==om[nOM]) return false;
		if(NS) Menu.style = Menu;
			
		if(AnimHnd && nOM>0) {
			AnimStep=100;
			Animate();
		}
		
		Menu.op = nOM>0?om[nOM].sc:null;
		Menu.sc = null;
		
		imgObj = null;
		if(isCascading) {
			HideSubMenus(om[nOM].sc.id);
			xy = GetSubMenuPos(Menu.style, algn);
			%%SUBMENUSOFFSET
			%%SCROLLOFFSET
		} else {
			xy = (algn<0?GetHSPos(x, y, NS?Menu.w:parseInt(Menu.style.width), NS?Menu.h:parseInt(Menu.style.height), -algn):[x,y]);
			if(hsImgName) {
				imgObj = NS?FindImage(cFrame.document, hsImgName.split("|")[0]):cFrame.document.images[hsImgName.split("|")[0]];
				if(imgObj) {
					var tbMode = hsImgName.split("|")[1];
					if(tbMode&2) xy[0] = AutoPos(Menu.style, imgObj, algn)[0] + (IsFrames?GetLeftTop()[0]:0) + MacOffset()[0];
					if(tbMode&1) xy[1] = AutoPos(Menu.style, imgObj, algn)[1] + (IsFrames?GetLeftTop()[1]:0) + MacOffset()[1];
				}
			}				
			%%MENUSOFFSET
		}
		
		if(xy) 
		{
		x = xy[0];
		y = xy[1];
		// CARRIE ADDED THIS
		if(mName=='gnLrn'
		|| mName=='gnOrd'
		|| mName=='gnMan'
		|| mName=='gnHlp')
		{
			x=x-19;
		} 
		// END CARRIE ADDED THIS
		}
		var pW = GetWidthHeight()[0] + GetLeftTop()[0];
		var pH = GetWidthHeight()[1] + GetLeftTop()[1];
			
		%%AUTOSCROLL
		
		if(IE) 
			with(Menu.style) {
				if(SM) display = "none";
				left = FixPos(x,parseInt(width),pW,0) + "px";
				top = FixPos(y,parseInt(height),pH,1) + "px";
				if(!IX&&!SM&&IsWin) clip = "rect(0 0 0 0)";
			}
		if(NS) {
			%%NS4CLIPBUG
			Menu.moveToAbsolute(FixPos(x,Menu.w,pW),FixPos(y,Menu.h,pH));
		}
		Menu.style.zIndex = 1000+tbNum+nOM;
		om[++nOM] = Menu;
		
		if(!NS) FixCommands(mName);
		if(SM) Menu.style.display = "inline";
		
		if(!IX) {
			if((IE&&IsWin&&!SM)||(NS&&Menu.style.clip.width==0))
				AnimHnd = window.setTimeout("Animate()", 10);
		}
		
		ToggleMenu(Menu, "visible");
		IsContext = false;
		smHnd = 0;
		
		return true;
	}

	function MacOffset(f)0/ {
		//IE
		//This function calculates the margins for the body under IE/Mac.
		//------------------------------
		//Version 1.0
		//
		var mo = [0,0];
		if(!f) f = mFrame;
		if(IsMac&&IE&&!SM&&!KQ&&(BV>=5))
			mo = [parseInt(f.document.body.leftMargin),parseInt(f.document.body.topMargin)];
		return mo;
	}

	function GetSubMenuPos(mg, a)0/ {
		//IE,NS,SM,OP,KQ
		//This function calculates the position of a submenu based on its alignment.
		//------------------------------
		//Version 1.1
		//
		var x;
		var y;
		var pg = om[nOM];
		var sc = pg.sc;
		
		if(NS) {
			pg.width = pg.w;
			pg.height = pg.h;
			mg.width = mg.w;
			mg.height = mg.h;
			sc.width = sc.clip.width;
			sc.height = sc.clip.height;
		} else
			sc = sc.style;
		pg = pg.style;
		var lp = parseInt(pg.left) + parseInt(sc.left);
		var tp = parseInt(pg.top) + parseInt(sc.top);
		
		switch(a) {
			case 0:
				x = lp;
				y = tp + parseInt(sc.height);
				break;
			case 1:
				x = lp + parseInt(sc.width) - parseInt(mg.width);
				y = tp + parseInt(sc.height);
				break;
			case 2:
				x = lp;
				y = tp - parseInt(mg.height);
				break;
			case 3:
				x = lp + parseInt(sc.width) - parseInt(mg.width);
				y = tp - parseInt(mg.height);
				break;
			case 4:
				x = lp - parseInt(mg.width);
				y = tp;
				break;
			case 5:
				x = lp - parseInt(mg.width);
				y = tp + parseInt(sc.height) - parseInt(mg.height);
				break;
			case 6:
				x = lp + parseInt(sc.width);
				y = tp;
				break;
			case 7:
				x = lp + parseInt(sc.width);
				y = tp + parseInt(sc.height) - parseInt(mg.height);
				break;
			case 8:
				x = lp - parseInt(mg.width);
				y = tp + (parseInt(sc.height) - parseInt(mg.height))/2;
				break;
			case 9:
				x = lp + parseInt(sc.width);
				y = tp + (parseInt(sc.height) - parseInt(mg.height))/2;
				break;
			case 10:
				x = lp + (parseInt(sc.width) - parseInt(mg.width))/2;
				y = tp - parseInt(mg.height);
				break;
			case 11:
				x = lp + (parseInt(sc.width) - parseInt(mg.width))/2;
				y = tp + parseInt(sc.height);
				break;
		}
		return [x,y];
	}

	function FixCommands(mName, f, t)0/ {
		//IE, SM
		//This function is used to fix the way the Gecko engine calculates
		//the borders and the way they affect the size of block elements.
		//It also fixes the way IE renderes pages while running CSS1Compat mode.
		//------------------------------
		//Version 2.3
		//
		var en = !OP;
		var m = GetObj(mName, f);
		var b;
		if(!m.Fixed) {
			if(!f) f = mFrame;
			if(!t) t = 0;
			if(IE&&!SM) en = (OP?false:(f.document.compatMode=="CSS1Compat"));
			if(en && t>0 && !SM) {
				b = GetBorderWidth(dmbtbB[t].borderLeft);
				dmbtbB[t].width = parseInt(dmbtbB[t].width) - 2*b + "px";
				dmbtbB[t].height = parseInt(dmbtbB[t].height) - 2*b + "px";
			}
			var sd = (BV<5?m.all.tags("DIV"):m.getElementsByTagName("DIV"));
			for(var i=0;i<(sd.length);(t>0?i+=2:i++)) {
				sd[i].noWrap = true;
				if(en)
					with(sd[i].style) {
						b = GetBorderWidth(borderLeft);
						if(borderLeft.indexOf("none")==-1)
							if(parseInt(width) && parseInt(height)) {
								width = parseInt(width) - 2*b + "px";
								height = parseInt(height) - 2*b + "px";
							}
					}
			}
		}
		m.Fixed = true;
	}

	function Animate()0/ {
		//IE,NS,SM,OP,KQ
		//This function is called by ShowMenu every time a new group must be displayed and produces the predefined unfolding effect.
		//Currently is disabled for Navigator, because of some weird bugs we found with the clip property of the layers.
		//------------------------------
		//Version 1.9
		//
		var r = '';
		var nw = nh = 0;
		if(AnimStep+AnimSpeed>100) AnimStep = 100;
		switch(fx) {
			case 1:
				if(IE) r = "0 " + AnimStep + "% " + AnimStep + "% 0";
				if(NS) nw = AnimStep; nh = AnimStep;
				break;
			case 2:
				if(IE) r = "0 100% " + AnimStep + "% 0";
				if(NS) nw = 100; nh = AnimStep;
				break;
			case 3:
				if(IE) r = "0 " + AnimStep + "% 100% 0";
				if(NS) nw = AnimStep; nh = 100;
				break;
			case 0:
				if(IE) r = "0 100% 100% 0";
				if(NS) nw = 100; nh = 100;
				break;
		}
		if(om[nOM]) {
			with(om[nOM].style) {
				if(IE)
					clip = "rect(" + r + ")";
				if(NS) {
					clip.width = w*(nw/100);
					clip.height = h*(nh/100);
				}
			}
			AnimStep += AnimSpeed;
			if(AnimStep<=100)
				AnimHnd = window.setTimeout("Animate()",25);
			else {
				ClearTimer(AnimHnd);
				AnimStep = 0;
				AnimHnd = 0;
			}
		}
	}

	function InTBHotSpot()0/ {
		//IE,NS,SM,OP,KQ
		//This function returns true if the mouse pointer is over a toolbar item.
		//------------------------------
		//Version 2.1
		//
		var m = (imgObj?imgObj:lmcHS);
		if(!m) return false;
		if(imgObj)
			if(imgObj.name.indexOf("dmbHSdyna")!=-1) {
				imgObj = null;
				return false;
			}	
		var tbl = 0;
		var tbt = 0;
		var x = mX;
		var y = mY;
		if(!imgObj) {
			if(NS) {
				tbl = m.parentLayer.left;
				tbt = m.parentLayer.top;
			} else {
				if(BV<5) m.parentNode = m.parentElement;
				tbl = parseInt(m.parentNode.style.left);
				tbt = parseInt(m.parentNode.style.top);
				m = m.style;
			}
		} else {
			m.left = GetImgXY(imgObj)[0];
			m.top = GetImgXY(imgObj)[1];
			if(NS) m.clip = m;
		}
		var l = parseInt(m.left) + tbl;
		var r = l+(IE?parseInt(m.width):m.clip.width);
		var t = parseInt(m.top) + tbt;
		var b = t+(IE?parseInt(m.height):m.clip.height);
		
		if(IsFrames&&!NS) {
			x -= GetLeftTop()[0];
			y -= GetLeftTop()[1];
		}
		return ((x>=l && x<=r) && (y>=t && y<=b));
	}

	function InMenu()0/ {
		//IE,NS,SM,OP,KQ
		//This function returns true if the mouse pointer is over the last opened menu.
		//------------------------------
		//Version 2.5
		//
		var m = om[nOM];
		if(!m)
			return false;
		else {
			if(!NS) if(!m.sc) return false;
			if(IE) m = m.style;
		}
		var l = parseInt(m.left);
		var r = l+(IE?parseInt(m.width):m.clip.width);
		var t = parseInt(m.top);
		var b = t+(IE?parseInt(m.height):m.clip.height);
		return ((mX>=l && mX<=r) && (mY>=t && mY<=b));			
	}

	function SetPointerPos(e)0/ {
		//IE,NS,SM,OP,KQ
		//This function sets the mX and mY variables with the current position of the mouse pointer.
		//------------------------------
		//e: Only used under Navigator, corresponds to the Event object.
		//------------------------------
		//Version 1.9
		//
		if(IE) {
			if(!SM) {
				if(mFrame!=cFrame||event==null) {
					var cfe = cFrame.window.event;
					var mfe = mFrame.window.event;
					if(IE&&IsMac) cfe = (cfe.type=="mousemove"?cfe:null);
					if(IE&&IsMac) mfe = (mfe.type=="mousemove"?mfe:null);
					if(mfe==null && cfe==null) return;
					e = (cfe?cfe:mfe);
				} else
					e = event;
			}
			mX = e.clientX + lt[0];
			mY = e.clientY + lt[1];
			if(!KQ) {
				ClearTimer(cFrame.iefwh);
				cFrame.iefwh = window.setTimeout("lt=GetLeftTop()", 100);
			}
		}
		if(NS) {
			mX = e.pageX;
			mY = e.pageY;
		}
	}

	function InSelMenu()0/ {
		//IE,NS,SM,OP,KQ
		//This function checks if the mouse pointer is on over the selected menu.
		//------------------------------
		//Version 1.1
		//
		var nOMb = nOM--;
		for(; nOM>0; nOM--)
			if(om[nOM].sc!=null) break;
		var im = InMenu();
		nOM = nOMb;
		return im || InMenu();
	}

	function IsOverMenus()0/ {
		//IE,NS,SM,OP,KQ
		//This function checks if the mouse pointer is on over any part of the menus.
		//------------------------------
		//Version 1.0
		//
		return (lmcHS||imgObj?InTBHotSpot():(nOM==1?!(om[nOM].sc!=null):false))||(nOM>0?InSelMenu():false);
	}

	function HideMenus(e)0/ {
		//IE,NS,SM,OP,KQ
		//This function checks if the mouse pointer is on a valid position and if the current menu should be kept visible.
		//The function is called every time the mouse pointer is moved over the document area.
		//------------------------------
		//e: Only used under Navigator, corresponds to the Event object.
		//------------------------------
		//Version 26.0
		//
		%%BLINKDIS
		SetPointerPos(e);
		if(!IsOverMenus() && mhdHnd==0)
			mhdHnd = window.setTimeout("mhdHnd=0;if(!IsOverMenus())Hide()", TimerHideDelay);
	}

	function FormsTweak(state)0/ {
		//IE,SM,OP
		//This is an undocumented function, which can be used to hide every listbox (or combo) element on a page.
		//This can be useful if the menus will be displayed over an area where is a combo box, which is an element that cannot be placed behind the menus and it will always appear over the menus resulting in a very undesirable effect.
		//------------------------------
		//Version 3.2
		//
		var fe;
		if(IE&&(!SM||OP)&&DoFormsTweak) {
			var m = om[nOM];
			if((BV>=5.5)&&!OP&&m&&!KQ)
				cIF(state=="visible"?"hidden":"visible");
			else
				if(nOM==1)
					for(var f=0; f<mFrame.document.forms.length; f++)
						for(var e=0; e<mFrame.document.forms[f].elements.length; e++) {
							fe = mFrame.document.forms[f].elements[e];
							if(fe.type) if(fe.type.indexOf("select")==0) fe.style.visibility = state;
						}
		}
	}

	function cIF(state)0/ {
		//IE
		//------------------------------
		//Version 1.4
		//
		var mfd = mFrame.document;
		if(mfd.readyState=="complete") {
			if(mfd.getElementsByTagName("SELECT").length==0) return;
			var m = om[nOM];
			var iname = m.id + "iframe";
			var i = GetObj(iname);
			if(!i) {
				i = mfd.createElement("?");
				i.id = iname + "pobj";
				mfd.body.insertBefore(i);
				i = mfd.createElement("IFRAME");
				if(location.protocol=="https:") i.src = "/ifo.htm";
				i.id = iname;
				i.style.position = "absolute";
				i.style.filter = "progid:DXImageTransform.Microsoft.Alpha(opacity=0)";
				mfd.getElementById(iname + "pobj").insertBefore(i);
			}		
			with(i.style) {
				m = m.style;
				left = m.left;
				top = m.top;
				width = m.width;
				height = m.height;
				zIndex = m.zIndex-1;
				visibility = state;
			}
		}
	}

	function execURL(url, tframe)0/ {
		//IE,NS,SM,OP,KQ
		//This function is called every time a command is triggered to jump to another page or execute some javascript code.
		//------------------------------
		//url: Encrypted URL that must be opened or executed.
		//tframe: If the url is a document location, tframe is the target frame where this document will be opened.
		//------------------------------
		//Version 1.3
		//
		var d = 100;
		if(mibc && !NS) {
			d += mibs * mibc;
			if(lmcHS) mibm = lmcHS;
			if(nOM)
				for(var n=nOM; n>0; n--)
					if(om[n].sc) {
						mibm = om[n].sc;
						break;
					}
			if(mibm) {
				mibm.n = mibc;
				BlinkItem();
			}
		} else
			HideAll();
		window.setTimeout("execURL2('" + escape(_purl(url)) + "', '" + tframe + "')", d);
	}

	function BlinkItem()0/ {
		//IE,NS,SM,OP,KQ
		//This function is used to blink a menu item when cliked.
		//------------------------------
		//Version 1.1
		//
		var f = (mibm.id.substr(1)>1000?cFrame:mFrame);
		if(mibm.bs == 1) {
			mibm.bs = 0;
			SwapMC(0, mibm, f);
		} else {
			mibm.bs = 1;
			SwapMC(1, mibm, f);
		}
		mibc--;
		if(mibc>=0)
			window.setTimeout("BlinkItem()", mibs);
		else {
			mibc = mibm.n;
			mibm = null;
			HideAll();
		}
	}

	function execURL2(url, tframe)0/ {
		//IE,NS,SM,OP,KQ
		//This function is called every time a command is triggered to jump to another page or execute some javascript code.
		//------------------------------
		//url: Encrypted URL that must be opened or executed.
		//tframe: If the url is a document location, tframe is the target frame where this document will be opened.
		//------------------------------
		//Version 3.0
		//
		var w = eval("windo" + "w.ope" + "n");
		url = rStr(unescape(url));
		if(url.indexOf("javascript:")!=url.indexOf("vbscript:"))
			eval(url);
		else {
			switch(tframe) {
				case "_self":
					if(IE&&!SM&&(BV>4)) {
						var a = mFrame.document.createElement("A");
						a.href = url;
						mFrame.document.body.appendChild(a);
						a.click();
					} else
						mFrame.location.href = url;
					break;
				case "_blank":
					w(url, tframe);
					break;
				default:
					var f = rStr(tframe);
					var fObj = (tframe=='_parent'?mFrame.parent:eval(f));
					if(typeof(fObj) == "undefined")
						w(url, f.substr(8, f.length-10));
					else
						fObj.location.href = url;
					break;
			}
		}
	}

	function rStr(s)0/ {
		//IE,NS,SM,OP,KQ
		//This function is used to decrypt the URL parameter from the triggered command.
		//------------------------------
		//Version 1.2
		//
		s = xrep(s,"%1E", "'");
		s = xrep(s,"\x1E", "'");
		if(OP&&s.indexOf("frames[")!=-1)
			s = xrep(s,String.fromCharCode(s.charCodeAt(7)), "'");
		return xrep(s,"\x1D", "\x22");
	}

	function hNSCClick(e)0/ {
		//NS
		//This function executes the selected command's trigger code.
		//------------------------------
		//Version 1.0
		//
		eval(this.TCode);
	}

	function HideAll(dr)0/ {
		//IE,NS,SM,OP,KQ
		//This function will hide all the currently opened menus.
		//------------------------------
		//Version 1.1
		//
		var o = lmcHS;
		lmcHS = null;
		Hide();
		while(nOM>0) Hide();
		lmcHS = o;
	}

	function tHideAll()0/ {
		//IE,NS,SM,OP,KQ
		//This function is called when the mouse is moved away from a hotspot to close any opened menu.
		//------------------------------
		//Version 1.5
		//
		ClearTimer(mhdHnd);mhdHnd = 0;
		mhdHnd = window.setTimeout("mhdHnd=0;if(!InSelMenu())HideAll();", TimerHideDelay);
	}

	function GetLeftTop(f)0/ {
		//IE,NS,SM,OP,KQ
		//This function returns the scroll bars position on the menus frame.
		//------------------------------
		//Version 2.7
		//
		if(!f) f = mFrame;
		if(IE)
			if(SM)
				return [OP?f.pageXOffset:f.scrollX,OP?f.pageYOffset:f.scrollY];
			else {
				var b = GetBodyObj(f);
				return (b?[b.scrollLeft,b.scrollTop]:[0,0]);
			}
		if(NS)
			return [f.pageXOffset,f.pageYOffset];
	}

	function GetWidthHeight(f)0/ {
		//IE,NS,SM,OP,KQ
		//This function returns the width and height of the menus frame.
		//------------------------------
		//Version 2.5
		//
		var k = 0;
		if(!f) f = mFrame;
		if(NS||SM) {
			return [f.innerWidth,f.innerHeight];
		} else {
			var b = GetBodyObj(f);
			return (b?[b.clientWidth,b.clientHeight]:[0,0]);
		}
	}

	function GetBodyObj(f)0/ {
		//IE
		//
		//------------------------------
		//Version 1.1
		//
		%%BODYOBJCODE%%
	}

	function GetBorderWidth(b)0/ {
		//IE,SM
		//This functions returns the width of a border
		//------------------------------
		//Version 1.3
		//
		var w;
		var l = b.split(" ");
		for(var i=0; i<l.length; i++)
			if(l[i].indexOf("px")!=-1) {
				w = parseInt(l[i]);
				if(w>0) return w;
			}
		return 0;
	}

	function GetCStyle(cmc)0/ {
		//IE,SM,OP
		//This function completes the style of command with all the common
		//parameters from the original style code.
		//------------------------------
		//Version 1.0
		//
		return "position: absolute; white-space: nowrap; left:" + cmc.left + 
			   "; top: " + cmc.top + 
			   "; width: " + cmc.width + 
			   "; height: " + cmc.height + "; ";
	}

	function AutoPos(m, img, arl)0/ {
		//IE,NS,SM,OP,KQ
		//This function finds the image-based hotspot and returns the position at which 
		//the menu should be displayed based on the alignment setting.
		//------------------------------
		//Version 1.5
		//
		var x = GetImgXY(img)[0];
		var y = GetImgXY(img)[1];
		var iWH = GetImgWH(img);
		var mW = parseInt(NS?m.w:m.width);
		var mH = parseInt(NS?m.h:m.height);
			
		switch(arl) {
			case 0:
				y += iWH[1];
				break;
			case 1:
				x += iWH[0] - mW;
				y += iWH[1];
				break;
			case 2:
				y -= mH;
				break;
			case 3:
				x += iWH[0] - mW;
				y -= mH;
				break;
			case 4:
				x -= mW;
				break;
			case 5:
				x -= mW;
				y -= mH - iWH[1];
				break;
			case 6:
				x += iWH[0];
				break;
			case 7:
				x += iWH[0];
				y -= mH - iWH[1];
				break;
			case 8:
				x -= mW;
				y += (iWH[1] - mH)/2;
				break;
			case 9:
				x += iWH[0];
				y += (iWH[1] - mH)/2;
				break;
			case 10:
				x += (iWH[0] - mW)/2;
				y -= mH;
				break;
			case 11:
				x += (iWH[0] - mW)/2;
				y += iWH[1];
				break;
		}		
		return [x, y];
	}

	function GetImgXY(img)0/ {
		//IE,NS,SM,OP,KQ
		//This function returns the x,y coordinates of an image.
		//------------------------------
		//Version 1.4
		//
		var x;
		var y;
			
		if(NS)	{
			y = GetImgOffset(cFrame, img.name, 0, 0);
			x = img.x + y[0];
			y = img.y + y[1];
		} else {
			y = getOffset(img);
			x = y[0];
			y = y[1];
		}			
		return [x, y];		
	}

	function GetImgWH(img)0/ {
		//IE,NS,SM,OP,KQ
		//This function returns the width and height of an image.
		//------------------------------
		//Version 1.2
		//
		return [parseInt(img.width), parseInt(img.height)];
	}

	function getOffset(img)0/ {
		//IE,NS,SM,OP,KQ
		//This function returns the horizontal and vertical offset of an object.
		//------------------------------
		//Version 1.2
		//
		xy = [img.offsetLeft, img.offsetTop];
		ce = img.offsetParent;
		while(ce!=null)	{
			xy[0] += ce.offsetLeft;
			xy[1] += ce.offsetTop;
			ce = ce.offsetParent;
		}
		return xy;
	}

	function FindImage(d, img)0/ {
		//NS
		//This function finds an image regardless of its location in the document structure.
		//------------------------------
		//Version 1.0
		//
		var i;
		var tmp;
		
		if(d.images[img]) return d.images[img];
		
		for(i=0; i<d.layers.length; i++) {
			tmp = FindImage(d.layers[i].document, img);
			if(tmp) return tmp;
		}
		return null;
	}

	function GetImgOffset(d, img, ox, oy)0/ {
		//NS
		//This function finds the offset to an image regardless of its location in the document structure.
		//------------------------------
		//Version 1.0
		//
		var i;
		var tmp;
		
		if(d.left) {
			ox += d.left;
			oy += d.top;
		}
				
		if(d.document.images[img]) return [ox, oy];
		
		for(i=0; i<d.document.layers.length; i++) {
			tmp = GetImgOffset(d.document.layers[i], img, ox, oy);
			if(tmp) return [tmp[0], tmp[1]];
		}		
		return null;
	}

	function ShowContextMenu(e)0/ {
		//IE,NS,SM
		//This function is called when a user rightclicks on the document and it will show a predefined menu.
		//------------------------------
		//Version 1.3
		//
		if(cntxMenu!='') {
			if(IE) {
				IsContext = true;
				SetPointerPos(e);
			}			
			if(NS)
				if(e.which==3) {
					IsContext = true;
					mX = e.x;
					mY = e.y;
				}
		}
		if(IsContext) {
			HideAll();
			cFrame.ShowMenu2(cntxMenu, mX-1, mY-1, false);
			return false;
		}
		return true;
	}

	function SetUpEvents()0/ {
		//IE,NS,SM,OP,KQ
		//This function initializes the frame variables and setups the event handling.
		//------------------------------
		//Version 2.8
		//
		nOM = 0;
		if(!SM) onerror = errHandler;
		if(!mFrame) mFrame = cFrame;
		if(typeof(mFrame)=="undefined" || (NS && (++NSDelay<2)))
			window.setTimeout("SetUpEvents()",10);
		else {
			IsFrames = (cFrame!=mFrame);
			if(NS) {
				mFrame.captureEvents(Event.MOUSEMOVE);
				mFrame.onmousemove = HideMenus;
				if(cntxMenu!="") {
					mFrame.window.captureEvents(Event.MOUSEDOWN);
					mFrame.window.onmousedown = ShowContextMenu;
				}
				nsOWH = GetWidthHeight();
				window.onresize = rHnd;
				PrepareEvents();
			}
			if(IE) {
				document.onmousemove = HideMenus;
				mFrame.document.onmousemove = document.onmousemove;
				mFrame.document.oncontextmenu = ShowContextMenu;
				if(IsFrames) mFrame.window.onunload = new Function("mFrame=null;SetUpEvents()");
				cFrame.lt = [0, 0];
			}
			%%FRAMESIG
			MenusReady = true;
		}
		%%DWSUPPORT03
		%%IRSUPPORT03
		
		return true;
	}

	function errHandler(sMsg,sUrl,sLine)0/ {
		//IE,NS
		//This function will trap any errors generated by the scripts and filter the unhandled ones.
		//------------------------------
		//Version 1.1
		//
		if(sMsg.substr(0,16)!="Access is denied"&&sMsg!="Permission denied"&&sMsg.indexOf("cursor")==-1)
			alert("Java Script Error\n" +
			      "\nDescription: " + sMsg +
			      "\nSource: " + sUrl +
			      "\nLine: "+sLine);
		return true;
	}

	function FixPos(p, s, r, k)0/ {
		//IE,NS,SM,OP,KQ
		//This function optimizes the position of the menus in order to ensure that they are always
		//displayed inside the browser's visible area.
		//------------------------------
		//Version 2.0
		//
		var n;
		if(nOM==0||k==1)
			n = (p+s>r)?r-s:p;
		else
			n = (p+s>r)?parseInt(om[nOM].style.left)-s:p;
		return (n<0)?0:n;
	}

	function FixPointSize(s)0/ {
		//NS
		//This function increases the point-size value for Navigator 4.
		//------------------------------
		//Version 2.0
		//
		if(IsWin||!NS) return s;
		for(var i=54; i>1; i--)
			if(s.indexOf("point-size=" + i)!=-1)
				s = xrep(s, "point-size=" + i, "point-size=" + (i+3));
		return s;
	}

	function ClearTimer(t, f)0/ {
		//IE,NS,SM,OP,KQ
		//This is a helper function used to overcome a bug in very
		//old versions of Navigator 4
		//------------------------------
		//Version 1.0
		//
		if(!f) f = cFrame;
		if(t) f.clearTimeout(t);
	}

	function xrep(s, f, n)0/ {
		//IE,NS,SM,OP,KQ
		//This function looks for any occurrence of the f string and replaces it with the n string.
		//------------------------------
		//Version 1.2
		//
		if(s) s = s.split(f).join(n);
		return s;
	}

	function rHnd()0/ {
		//NS
		//This function is used to reload the page when Navigator window is resized.
		//Original Code from DHTML Lab
		//------------------------------
		//Version 1.0
		//
		var nsCWH = GetWidthHeight();
		if((nsCWH[0]!=nsOWH[0]) || (nsCWH[1]!=nsOWH[1]))
			frames["top"].location.reload();
	}

	function FixCursor(mc, f)0/ {
		//IE
		//This function fixes a bug that affects IE6 and custom cursors.
		//------------------------------
		//Version 1.1
		//
		if(!OP) {
			if(!f) f = mFrame;
			var os = GetObj("O" + mc.id.substr(1), f).style;
			var s = os.cursor;
			if(s=="") os.cursor = (BV<6?"hand":s.split("cursor: url(")[1].split(")")[0]);
		}
	}

	function GetObj(oName, f)0/ {
		//IE,NS,SM,OP,KQ
		//This function returns the object whose name is oName and its located in the f frame.
		//------------------------------
		//Version 1.1
		//
		var obj = null;
		if(!f) f = mFrame;
		if(NS)
			obj = f.document.layers[oName];
		else {
			if(BV>=5)
				obj = f.document.getElementById(oName);
			else
				obj = f.document.all[oName];
			if(obj)
				if(obj.id!=oName) obj = null;
		}
		return obj;
	}

	function PrepareEvents()0/ {
		//NS
		//This function is called right after the menus are rendered.
		//It has been designed to attach the event handlers to the <layer> tag and
		//fix the font size problems with Navigator under the Mac and Linux.
		//------------------------------
		//Version 4.1
		//
		for(var l=0; l<mFrame.document.layers.length; l++) {
			var lo = mFrame.document.layers[l];
			if(lo.layers.length) {
				lo.w = lo.clip.width;
				lo.h = lo.clip.height;
				for(var sx=0; sx<lo.layers.length; sx++)
					for(var sl=0; sl<lo.layers[sx].layers.length; sl++) {
						var slo = mFrame.document.layers[l].layers[sx].layers[sl];
						if(slo.name.indexOf("EH")>0) {
							slo.document.onmouseup = hNSCClick;
							slo.document.TCode = nTCode[slo.name.split("EH")[1]];
						}
					}
				%%TOOLBARPREPAREEVENTS
			}
		}
	}

%%TOOLBARCODE

%%KBDNAVSUP

%%BROWSERCODE
